#!/bin/bash

# Script para configurar autostart autom√°tico sem login
# Execute com: sudo bash autostart_config.sh

set -e

echo "=========================================="
echo "Configura√ß√£o de Autostart Autom√°tico"
echo "=========================================="

# Verificar se √© root
if [ "$EUID" -ne 0 ]; then
    echo "‚ùå Este script deve ser executado como root (sudo)"
    exit 1
fi

# Verificar se √© Raspberry Pi
if ! grep -q "Raspberry Pi" /proc/cpuinfo; then
    echo "‚ö†Ô∏è  Este script √© destinado para Raspberry Pi"
    read -p "Continuar mesmo assim? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

echo "üîß Configurando autostart autom√°tico..."

# 1. Configurar auto-login para o usu√°rio
echo "üë§ Configurando auto-login..."
if [ -f /etc/systemd/system/getty@tty1.service.d/autologin.conf ]; then
    echo "‚úÖ Auto-login j√° configurado"
else
    mkdir -p /etc/systemd/system/getty@tty1.service.d/
    cat > /etc/systemd/system/getty@tty1.service.d/autologin.conf << EOF
[Service]
ExecStart=
ExecStart=-/sbin/agetty --autologin $SUDO_USER --noclear %I \$TERM
Type=idle
EOF
    echo "‚úÖ Auto-login configurado para usu√°rio $SUDO_USER"
fi

# 2. Configurar auto-login no lightdm (se dispon√≠vel)
echo "üñ•Ô∏è  Configurando auto-login no LightDM..."
if [ -f /etc/lightdm/lightdm.conf ]; then
    # Backup do arquivo original
    cp /etc/lightdm/lightdm.conf /etc/lightdm/lightdm.conf.backup
    
    # Adicionar configura√ß√µes de auto-login
    cat >> /etc/lightdm/lightdm.conf << EOF

# Configura√ß√µes de auto-login
[SeatDefaults]
autologin-user=$SUDO_USER
autologin-user-timeout=0
autologin-session=lightdm-autologin
EOF
    echo "‚úÖ Auto-login LightDM configurado"
else
    echo "‚ö†Ô∏è  LightDM n√£o encontrado, configurando alternativas..."
fi

# 3. Configurar auto-login no LXDE (Raspberry Pi OS)
echo "üçì Configurando auto-login no LXDE..."
if [ -f /etc/lxdm/lxdm.conf ]; then
    # Backup do arquivo original
    cp /etc/lxdm/lxdm.conf /etc/lxdm/lxdm.conf.backup
    
    # Configurar auto-login
    sed -i 's/# autologin=.*/autologin='$SUDO_USER'/' /etc/lxdm/lxdm.conf
    sed -i 's/# timeout=.*/timeout=0/' /etc/lxdm/lxdm.conf
    echo "‚úÖ Auto-login LXDM configurado"
fi

# 4. Configurar autostart da aplica√ß√£o
echo "üöÄ Configurando autostart da aplica√ß√£o..."

# Criar diret√≥rio de autostart se n√£o existir
mkdir -p /etc/xdg/autostart
mkdir -p /etc/xdg/lxsession/LXDE-pi/autostart
mkdir -p /etc/xdg/lxsession/LXDE/autostart
mkdir -p /home/$SUDO_USER/.config/autostart

# Configurar autostart global (para todos os usu√°rios)
cat > /etc/xdg/autostart/scanner-system.desktop << EOF
[Desktop Entry]
Type=Application
Name=Sistema de Scanner
Comment=Sistema de Scanner Raspberry Pi
Exec=python3 /opt/scanner-system/src/app.py
Terminal=false
X-GNOME-Autostart-enabled=true
Hidden=false
EOF

# Configurar autostart espec√≠fico do LXDE
cat > /etc/xdg/lxsession/LXDE-pi/autostart/scanner-system << EOF
@python3 /opt/scanner-system/src/app.py
EOF

cat > /etc/xdg/lxsession/LXDE/autostart/scanner-system << EOF
@python3 /opt/scanner-system/src/app.py
EOF

# Configurar autostart do usu√°rio
cat > /home/$SUDO_USER/.config/autostart/scanner-system.desktop << EOF
[Desktop Entry]
Type=Application
Name=Sistema de Scanner
Comment=Sistema de Scanner Raspberry Pi
Exec=python3 /opt/scanner-system/src/app.py
Terminal=false
X-GNOME-Autostart-enabled=true
Hidden=false
EOF

echo "‚úÖ Autostart configurado em m√∫ltiplos locais"

# 5. Configurar execu√ß√£o autom√°tica no .bashrc
echo "üìù Configurando execu√ß√£o no .bashrc..."
if ! grep -q "scanner-system" /home/$SUDO_USER/.bashrc; then
    cat >> /home/$SUDO_USER/.bashrc << EOF

# Auto-executar sistema de scanner
if [ -z "\$DISPLAY" ] && [ -t 0 ]; then
    # Se n√£o h√° display e √© terminal, n√£o executar
    return
fi

# Verificar se j√° est√° rodando
if ! pgrep -f "scanner-system" > /dev/null; then
    # Aguardar um pouco para o sistema carregar
    sleep 5
    
    # Executar aplica√ß√£o
    if [ -f "/opt/scanner-system/src/app.py" ]; then
        cd /opt/scanner-system
        python3 src/app.py &
    fi
fi
EOF
    echo "‚úÖ Execu√ß√£o autom√°tica configurada no .bashrc"
else
    echo "‚úÖ Execu√ß√£o autom√°tica j√° configurada no .bashrc"
fi

# 6. Configurar execu√ß√£o no .profile
echo "üìù Configurando execu√ß√£o no .profile..."
if ! grep -q "scanner-system" /home/$SUDO_USER/.profile; then
    cat >> /home/$SUDO_USER/.profile << EOF

# Auto-executar sistema de scanner
if [ -n "\$DISPLAY" ]; then
    # Aguardar um pouco para o sistema carregar
    sleep 3
    
    # Verificar se j√° est√° rodando
    if ! pgrep -f "scanner-system" > /dev/null; then
        # Executar aplica√ß√£o
        if [ -f "/opt/scanner-system/src/app.py" ]; then
            cd /opt/scanner-system
            python3 src/app.py &
        fi
    fi
fi
EOF
    echo "‚úÖ Execu√ß√£o autom√°tica configurada no .profile"
else
    echo "‚úÖ Execu√ß√£o autom√°tica j√° configurada no .profile"
fi

# 7. Configurar execu√ß√£o no .xinitrc
echo "üìù Configurando execu√ß√£o no .xinitrc..."
if [ -f /home/$SUDO_USER/.xinitrc ]; then
    # Backup do arquivo original
    cp /home/$SUDO_USER/.xinitrc /home/$SUDO_USER/.xinitrc.backup
    
    # Adicionar execu√ß√£o da aplica√ß√£o
    if ! grep -q "scanner-system" /home/$SUDO_USER/.xinitrc; then
        cat >> /home/$SUDO_USER/.xinitrc << EOF

# Executar sistema de scanner
if [ -f "/opt/scanner-system/src/app.py" ]; then
    cd /opt/scanner-system
    python3 src/app.py &
fi
EOF
        echo "‚úÖ Execu√ß√£o autom√°tica configurada no .xinitrc"
    else
        echo "‚úÖ Execu√ß√£o autom√°tica j√° configurada no .xinitrc"
    fi
else
    # Criar .xinitrc se n√£o existir
    cat > /home/$SUDO_USER/.xinitrc << EOF
#!/bin/bash

# Executar sistema de scanner
if [ -f "/opt/scanner-system/src/app.py" ]; then
    cd /opt/scanner-system
    python3 src/app.py &
fi

# Executar desktop padr√£o
exec startx
EOF
    chmod +x /home/$SUDO_USER/.xinitrc
    echo "‚úÖ .xinitrc criado com execu√ß√£o autom√°tica"
fi

# 8. Configurar permiss√µes
echo "üîê Configurando permiss√µes..."
chown -R $SUDO_USER:$SUDO_USER /home/$SUDO_USER/.config
chown -R $SUDO_USER:$SUDO_USER /home/$SUDO_USER/.bashrc
chown -R $SUDO_USER:$SUDO_USER /home/$SUDO_USER/.profile
chown -R $SUDO_USER:$SUDO_USER /home/$SUDO_USER/.xinitrc

# 9. Configurar servi√ßo systemd para auto-iniciar
echo "‚öôÔ∏è  Configurando servi√ßo systemd..."
if command -v systemctl &> /dev/null; then
    # Criar servi√ßo de auto-login
    cat > /etc/systemd/system/autologin@tty1.service << EOF
[Unit]
Description=Auto-login for %I on tty1
After=systemd-user-sessions.service getty@tty1.service
Wants=getty@tty1.service

[Service]
Type=simple
ExecStart=/bin/bash -c 'cd /opt/scanner-system && python3 src/app.py'
User=%I
Group=%I
WorkingDirectory=/opt/scanner-system
Restart=always
RestartSec=10

[Install]
WantedBy=graphical.target
EOF

    # Habilitar servi√ßo
    systemctl daemon-reload
    systemctl enable autologin@$SUDO_USER.service
    echo "‚úÖ Servi√ßo de auto-login configurado"
else
    echo "‚ö†Ô∏è  systemctl n√£o dispon√≠vel, servi√ßo n√£o configurado"
fi

# 10. Configurar para iniciar em modo gr√°fico
echo "üñ•Ô∏è  Configurando modo gr√°fico..."
if [ -f /etc/default/raspi-config ]; then
    # Configurar para iniciar em modo gr√°fico
    sed -i 's/BOOT_TO_CLI=1/BOOT_TO_CLI=0/' /etc/default/raspi-config 2>/dev/null || true
fi

# 11. Configurar para n√£o mostrar tela de login
echo "üîí Configurando para n√£o mostrar tela de login..."
if [ -f /etc/systemd/system/display-manager.service ]; then
    # Habilitar display manager
    systemctl enable display-manager.service 2>/dev/null || true
fi

# 12. Configurar timeout de boot
echo "‚è±Ô∏è  Configurando timeout de boot..."
if [ -f /boot/cmdline.txt ]; then
    # Adicionar timeout para boot mais r√°pido
    if ! grep -q "consoleblank=0" /boot/cmdline.txt; then
        echo " consoleblank=0" >> /boot/cmdline.txt
        echo "‚úÖ Timeout de boot configurado"
    fi
fi

# 13. Configurar para n√£o mostrar mensagens de boot
echo "üîá Configurando para n√£o mostrar mensagens de boot..."
if [ -f /boot/cmdline.txt ]; then
    # Adicionar par√¢metros para boot silencioso
    if ! grep -q "quiet" /boot/cmdline.txt; then
        echo " quiet" >> /boot/cmdline.txt
        echo "‚úÖ Boot silencioso configurado"
    fi
    if ! grep -q "logo.nologo" /boot/cmdline.txt; then
        echo " logo.nologo" >> /boot/cmdline.txt
        echo "‚úÖ Logo removido do boot"
    fi
fi

# 14. Configurar para iniciar aplica√ß√£o imediatamente
echo "üöÄ Configurando execu√ß√£o imediata..."
cat > /opt/scanner-system/start_immediately.sh << EOF
#!/bin/bash
# Script para iniciar aplica√ß√£o imediatamente

cd /opt/scanner-system

# Aguardar um pouco para o sistema carregar
sleep 2

# Executar aplica√ß√£o
if [ -f "src/app.py" ]; then
    python3 src/app.py
else
    echo "Erro: Aplica√ß√£o n√£o encontrada"
    exit 1
fi
EOF

chmod +x /opt/scanner-system/start_immediately.sh
chown $SUDO_USER:$SUDO_USER /opt/scanner-system/start_immediately.sh

# 15. Configurar para executar este script no boot
echo "üìã Configurando execu√ß√£o do script no boot..."
cat > /etc/systemd/system/scanner-autostart.service << EOF
[Unit]
Description=Scanner System Auto-start
After=graphical-session.target
Wants=graphical-session.target

[Service]
Type=simple
User=$SUDO_USER
Group=$SUDO_USER
WorkingDirectory=/opt/scanner-system
ExecStart=/opt/scanner-system/start_immediately.sh
Restart=always
RestartSec=10
Environment=DISPLAY=:0
Environment=XAUTHORITY=/home/$SUDO_USER/.Xauthority

[Install]
WantedBy=graphical-session.target
EOF

if command -v systemctl &> /dev/null; then
    systemctl daemon-reload
    systemctl enable scanner-autostart.service
    echo "‚úÖ Servi√ßo de auto-start configurado"
fi

echo "=========================================="
echo "‚úÖ Configura√ß√£o de autostart conclu√≠da!"
echo "=========================================="
echo ""
echo "üìã O que foi configurado:"
echo "‚úÖ Auto-login autom√°tico para usu√°rio $SUDO_USER"
echo "‚úÖ Autostart da aplica√ß√£o Tkinter"
echo "‚úÖ Execu√ß√£o em m√∫ltiplos pontos de inicializa√ß√£o"
echo "‚úÖ Servi√ßo systemd para auto-iniciar"
echo "‚úÖ Boot em modo gr√°fico"
echo "‚úÖ Sem tela de login"
echo ""
echo "üîÑ Para aplicar as configura√ß√µes:"
echo "1. Reinicie o sistema: sudo reboot"
echo "2. O sistema deve iniciar automaticamente"
echo "3. A aplica√ß√£o Tkinter deve aparecer automaticamente"
echo ""
echo "üîß Comandos √∫teis:"
echo "   sudo systemctl status scanner-autostart.service"
echo "   sudo systemctl status autologin@$SUDO_USER.service"
echo "   journalctl -u scanner-autostart.service -f"
echo ""
echo "‚ö†Ô∏è  NOTA: Se algo n√£o funcionar, verifique os logs acima"
echo "=========================================="

# Criar arquivo de status da configura√ß√£o
cat > /opt/scanner-system/autostart-status.txt << EOF
Configura√ß√£o de autostart conclu√≠da em: $(date)
Usu√°rio: $SUDO_USER
Status: ‚úÖ Configurado
Configura√ß√µes aplicadas:
- Auto-login habilitado
- Autostart da aplica√ß√£o
- Execu√ß√£o autom√°tica
- Servi√ßos habilitados
EOF

echo "üìÑ Status da configura√ß√£o salvo em: /opt/scanner-system/autostart-status.txt" 