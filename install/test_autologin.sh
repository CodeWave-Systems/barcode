#!/bin/bash

# Script para testar se o login autom√°tico est√° funcionando
# Execute com: bash test_autologin.sh

echo "üß™ Testando Configura√ß√£o de Login Autom√°tico"
echo "============================================"

# Verificar se estamos rodando como usu√°rio pi
if [ "$USER" != "pi" ]; then
    echo "‚ö†Ô∏è  Este script deve ser executado como usu√°rio pi"
    echo "   Execute: su - pi"
    echo "   Ou: sudo -u pi bash test_autologin.sh"
    exit 1
fi

echo "üë§ Usu√°rio atual: $USER"
echo "üè† Diret√≥rio home: $HOME"

# 1. Verificar configura√ß√£o LXDE
echo ""
echo "üçì Verificando configura√ß√£o LXDE..."
if [ -f /etc/lxdm/lxdm.conf ]; then
    echo "‚úÖ Arquivo LXDE encontrado"
    
    # Verificar auto-login
    if grep -q "autologin=pi" /etc/lxdm/lxdm.conf; then
        echo "‚úÖ Auto-login configurado para usu√°rio pi"
        AUTOLOGIN_USER=$(grep "autologin=" /etc/lxdm/lxdm.conf | cut -d'=' -f2)
        echo "   Usu√°rio configurado: $AUTOLOGIN_USER"
    else
        echo "‚ùå Auto-login n√£o configurado para usu√°rio pi"
    fi
    
    # Verificar timeout
    if grep -q "timeout=0" /etc/lxdm/lxdm.conf; then
        echo "‚úÖ Timeout configurado como 0 (sem espera)"
    else
        echo "‚ö†Ô∏è  Timeout n√£o configurado como 0"
    fi
else
    echo "‚ùå Arquivo LXDE n√£o encontrado"
fi

# 2. Verificar autostart da aplica√ß√£o
echo ""
echo "üöÄ Verificando autostart da aplica√ß√£o..."

AUTOSTART_PATHS=(
    "/etc/xdg/lxsession/LXDE-pi/autostart/scanner-system"
    "/etc/xdg/lxsession/LXDE/autostart/scanner-system"
    "$HOME/.config/autostart/scanner-system.desktop"
)

for path in "${AUTOSTART_PATHS[@]}"; do
    if [ -f "$path" ]; then
        echo "‚úÖ $path existe"
        if [[ "$path" == *".desktop" ]]; then
            # Verificar conte√∫do do arquivo .desktop
            if grep -q "Exec=python3 /opt/scanner-system/src/app.py" "$path"; then
                echo "   ‚úÖ Comando de execu√ß√£o correto"
            else
                echo "   ‚ö†Ô∏è  Comando de execu√ß√£o pode estar incorreto"
            fi
        else
            # Verificar conte√∫do do arquivo de texto
            if grep -q "python3 /opt/scanner-system/src/app.py" "$path"; then
                echo "   ‚úÖ Comando de execu√ß√£o correto"
            else
                echo "   ‚ö†Ô∏è  Comando de execu√ß√£o pode estar incorreto"
            fi
        fi
    else
        echo "‚ùå $path n√£o existe"
    fi
done

# 3. Verificar execu√ß√£o autom√°tica nos arquivos de perfil
echo ""
echo "üìù Verificando execu√ß√£o autom√°tica..."

# Verificar .bashrc
if [ -f "$HOME/.bashrc" ]; then
    if grep -q "scanner-system" "$HOME/.bashrc; then
        echo "‚úÖ Execu√ß√£o autom√°tica configurada no .bashrc"
    else
        echo "‚ùå Execu√ß√£o autom√°tica n√£o configurada no .bashrc"
    fi
else
    echo "‚ö†Ô∏è  Arquivo .bashrc n√£o encontrado"
fi

# Verificar .profile
if [ -f "$HOME/.profile" ]; then
    if grep -q "scanner-system" "$HOME/.profile; then
        echo "‚úÖ Execu√ß√£o autom√°tica configurada no .profile"
    else
        echo "‚ùå Execu√ß√£o autom√°tica n√£o configurada no .profile"
    fi
else
    echo "‚ö†Ô∏è  Arquivo .profile n√£o encontrado"
fi

# Verificar .xinitrc
if [ -f "$HOME/.xinitrc" ]; then
    if grep -q "scanner-system" "$HOME/.xinitrc; then
        echo "‚úÖ Execu√ß√£o autom√°tica configurada no .xinitrc"
    else
        echo "‚ùå Execu√ß√£o autom√°tica n√£o configurada no .xinitrc"
    fi
else
    echo "‚ö†Ô∏è  Arquivo .xinitrc n√£o encontrado"
fi

# 4. Verificar se a aplica√ß√£o existe
echo ""
echo "üîç Verificando se a aplica√ß√£o existe..."
if [ -f "/opt/scanner-system/src/app.py" ]; then
    echo "‚úÖ Aplica√ß√£o encontrada em /opt/scanner-system/src/app.py"
    
    # Verificar permiss√µes
    if [ -r "/opt/scanner-system/src/app.py" ]; then
        echo "   ‚úÖ Aplica√ß√£o tem permiss√£o de leitura"
    else
        echo "   ‚ùå Aplica√ß√£o n√£o tem permiss√£o de leitura"
    fi
    
    if [ -x "/opt/scanner-system/src/app.py" ]; then
        echo "   ‚úÖ Aplica√ß√£o tem permiss√£o de execu√ß√£o"
    else
        echo "   ‚ö†Ô∏è  Aplica√ß√£o n√£o tem permiss√£o de execu√ß√£o"
    fi
else
    echo "‚ùå Aplica√ß√£o n√£o encontrada em /opt/scanner-system/src/app.py"
    echo "   Certifique-se de que os arquivos foram copiados para /opt/scanner-system/"
fi

# 5. Verificar script de execu√ß√£o
echo ""
echo "üìã Verificando script de execu√ß√£o..."
if [ -f "/opt/scanner-system/start_app.sh" ]; then
    echo "‚úÖ Script de execu√ß√£o encontrado"
    
    if [ -x "/opt/scanner-system/start_app.sh" ]; then
        echo "   ‚úÖ Script tem permiss√£o de execu√ß√£o"
    else
        echo "   ‚ùå Script n√£o tem permiss√£o de execu√ß√£o"
    fi
    
    if [ -r "/opt/scanner-system/start_app.sh" ]; then
        echo "   ‚úÖ Script tem permiss√£o de leitura"
    else
        echo "   ‚ùå Script n√£o tem permiss√£o de leitura"
    fi
else
    echo "‚ùå Script de execu√ß√£o n√£o encontrado"
fi

# 6. Verificar servi√ßo systemd
echo ""
echo "‚öôÔ∏è  Verificando servi√ßo systemd..."
if command -v systemctl &> /dev/null; then
    if systemctl is-enabled scanner-autostart.service > /dev/null 2>&1; then
        echo "‚úÖ Servi√ßo scanner-autostart est√° habilitado"
        
        # Verificar status
        SERVICE_STATUS=$(systemctl is-active scanner-autostart.service 2>/dev/null || echo "inactive")
        echo "   Status atual: $SERVICE_STATUS"
        
        if [ "$SERVICE_STATUS" = "active" ]; then
            echo "   ‚úÖ Servi√ßo est√° rodando"
        else
            echo "   ‚ö†Ô∏è  Servi√ßo n√£o est√° rodando"
        fi
    else
        echo "‚ùå Servi√ßo scanner-autostart n√£o est√° habilitado"
    fi
else
    echo "‚ö†Ô∏è  systemctl n√£o dispon√≠vel"
fi

# 7. Verificar modo gr√°fico
echo ""
echo "üñ•Ô∏è  Verificando modo gr√°fico..."
if [ -f /etc/default/raspi-config ]; then
    if grep -q "BOOT_TO_CLI=0" /etc/default/raspi-config; then
        echo "‚úÖ Modo gr√°fico configurado (BOOT_TO_CLI=0)"
    else
        echo "‚ùå Modo gr√°fico n√£o configurado (BOOT_TO_CLI=1)"
    fi
else
    echo "‚ö†Ô∏è  Arquivo raspi-config n√£o encontrado"
fi

# 8. Verificar boot silencioso
echo ""
echo "üîá Verificando boot silencioso..."
if [ -f /boot/cmdline.txt ]; then
    BOOT_CONFIGURED=true
    
    if grep -q "quiet" /boot/cmdline.txt; then
        echo "‚úÖ Boot silencioso configurado (quiet)"
    else
        echo "‚ùå Boot silencioso n√£o configurado"
        BOOT_CONFIGURED=false
    fi
    
    if grep -q "logo.nologo" /boot/cmdline.txt; then
        echo "‚úÖ Logo removido do boot (logo.nologo)"
    else
        echo "‚ùå Logo n√£o removido do boot"
        BOOT_CONFIGURED=false
    fi
    
    if [ "$BOOT_CONFIGURED" = true ]; then
        echo "‚úÖ Boot silencioso completamente configurado"
    fi
else
    echo "‚ö†Ô∏è  Arquivo cmdline.txt n√£o encontrado"
fi

# 9. Verificar vari√°veis de ambiente
echo ""
echo "üåç Verificando vari√°veis de ambiente..."
if [ -n "$DISPLAY" ]; then
    echo "‚úÖ DISPLAY configurado: $DISPLAY"
else
    echo "‚ùå DISPLAY n√£o configurado"
fi

if [ -n "$XAUTHORITY" ]; then
    echo "‚úÖ XAUTHORITY configurado: $XAUTHORITY"
else
    echo "‚ö†Ô∏è  XAUTHORITY n√£o configurado"
fi

# 10. Teste de execu√ß√£o da aplica√ß√£o
echo ""
echo "üß™ Testando execu√ß√£o da aplica√ß√£o..."
if [ -f "/opt/scanner-system/src/app.py" ]; then
    echo "Tentando executar aplica√ß√£o em modo teste..."
    
    # Verificar se Python est√° dispon√≠vel
    if command -v python3 &> /dev/null; then
        echo "‚úÖ Python3 encontrado: $(python3 --version)"
        
        # Verificar se customtkinter est√° dispon√≠vel
        if python3 -c "import customtkinter; print('‚úÖ customtkinter dispon√≠vel')" 2>/dev/null; then
            echo "‚úÖ customtkinter dispon√≠vel"
            
            # Tentar executar aplica√ß√£o em modo teste (sem GUI)
            echo "Testando import da aplica√ß√£o..."
            cd /opt/scanner-system
            
            if python3 -c "import sys; sys.path.append('src'); import app; print('‚úÖ Aplica√ß√£o pode ser importada')" 2>/dev/null; then
                echo "‚úÖ Aplica√ß√£o pode ser importada com sucesso"
            else
                echo "‚ùå Aplica√ß√£o n√£o pode ser importada"
                echo "   Verifique se h√° erros de sintaxe ou depend√™ncias faltando"
            fi
        else
            echo "‚ùå customtkinter n√£o dispon√≠vel"
            echo "   Execute: pip3 install customtkinter"
        fi
    else
        echo "‚ùå Python3 n√£o encontrado"
    fi
else
    echo "‚ùå Aplica√ß√£o n√£o encontrada para teste"
fi

# 11. Resumo final
echo ""
echo "============================================"
echo "üìã RESUMO DO TESTE"
echo "============================================"

# Contar configura√ß√µes corretas
CORRECT_CONFIGS=0
TOTAL_CONFIGS=0

# Verificar cada configura√ß√£o
if grep -q "autologin=pi" /etc/lxdm/lxdm.conf 2>/dev/null; then
    ((CORRECT_CONFIGS++))
fi
((TOTAL_CONFIGS++))

if [ -f "/etc/xdg/lxsession/LXDE-pi/autostart/scanner-system" ]; then
    ((CORRECT_CONFIGS++))
fi
((TOTAL_CONFIGS++))

if [ -f "$HOME/.config/autostart/scanner-system.desktop" ]; then
    ((CORRECT_CONFIGS++))
fi
((TOTAL_CONFIGS++))

if grep -q "scanner-system" "$HOME/.bashrc" 2>/dev/null; then
    ((CORRECT_CONFIGS++))
fi
((TOTAL_CONFIGS++))

if [ -f "/opt/scanner-system/src/app.py" ]; then
    ((CORRECT_CONFIGS++))
fi
((TOTAL_CONFIGS++))

if systemctl is-enabled scanner-autostart.service > /dev/null 2>&1; then
    ((CORRECT_CONFIGS++))
fi
((TOTAL_CONFIGS++))

PERCENTAGE=$((CORRECT_CONFIGS * 100 / TOTAL_CONFIGS))

echo "‚úÖ Configura√ß√µes corretas: $CORRECT_CONFIGS/$TOTAL_CONFIGS ($PERCENTAGE%)"

if [ $PERCENTAGE -eq 100 ]; then
    echo "üéâ PERFEITO! Todas as configura√ß√µes est√£o corretas!"
    echo "   O sistema deve funcionar automaticamente ap√≥s reiniciar."
elif [ $PERCENTAGE -ge 80 ]; then
    echo "üëç MUITO BOM! A maioria das configura√ß√µes est√° correta."
    echo "   O sistema deve funcionar, mas pode ter alguns problemas menores."
elif [ $PERCENTAGE -ge 60 ]; then
    echo "‚ö†Ô∏è  REGULAR! Algumas configura√ß√µes est√£o corretas."
    echo "   O sistema pode funcionar parcialmente."
else
    echo "‚ùå PROBLEMAS! Muitas configura√ß√µes est√£o incorretas."
    echo "   Execute o script de configura√ß√£o novamente."
fi

echo ""
echo "üîÑ Para aplicar todas as configura√ß√µes:"
echo "1. Reinicie o sistema: sudo reboot"
echo "2. O sistema deve iniciar automaticamente como usu√°rio pi"
echo "3. A aplica√ß√£o Tkinter deve aparecer automaticamente"
echo ""
echo "üîß Para corrigir problemas:"
echo "   sudo bash install/setup_pi_user.sh"
echo ""
echo "============================================" 